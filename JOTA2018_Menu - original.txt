//       Arduino Rotary Encoder Menu        //
//                 v1.0                     //
//           http://www.educ8s.tv           //
/////////////////////////////////////////////

#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include <ClickEncoder.h>
#include <TimerOne.h>
#include <MPU9250.h>
#include <quaternionFilters.h>
#include <Adafruit_BME280.h>
//#include <Adafruit_SI1145.h>

// Prefered font
#include <Fonts/FreeMono9pt7b.h>

int menuitem = 1;
int frame = 1;
int page = 1;
int lastMenuItem = 1;

String menuItem1 = "Contrast";
String menuItem2 = "Brighness";
String menuItem3 = "Language";
String menuItem4 = "Difficulty";
String menuItem5 = "Light: ON";
String menuItem6 = "Reset";

boolean backlight = true;
int backlightPin = 10;
int contrast = 14; // 0-31 * 4 = 0-127
int brightness = 16; // 0-31 * 32 = 0-1023

String language[3] = { "EN", "ES", "EL" };
int selectedLanguage = 0;

String difficulty[2] = { "EASY", "HARD" };
int selectedDifficulty = 0;

boolean up = false;
boolean down = false;
boolean middle = false;

//boolean si1145missing = false;

ClickEncoder *encoder;
int16_t last, value;

Adafruit_PCD8544 display = Adafruit_PCD8544( 5, 4, 3); //Download the latest Adafruit Library in order to use this constructor

// BME280
#define SEALEVELPRESSURE_HPA (1013.25)
Adafruit_BME280 bme; // I2C

// MPU9250
MPU9250 mpu;

// SI1145
//Adafruit_SI1145 uv = Adafruit_SI1145();

void setup() {


  // initalise backlight PWM pin
  pinMode(backlightPin, OUTPUT);
  Timer1.initialize(1000); // initalise timer for backlight PWM and encoder

  turnBacklightOn();

  //Serial.begin(115200);

  // Init Display
  display.begin(40, 4);
  //display.setContrast(55);
  // setContrast();
  display.clearDisplay();
  display.display();

  // Set Font
  //display.setFont(&FreeMono9pt7b);

  // Welcome Display
  display.setTextSize(2); // 1 in small, 2 is large. Small characters are 6 x 8 pixels
  //display.setTextColor(BLACK, WHITE);
  display.setCursor(18, 4);
  display.println("JOTA");
  display.setCursor(18, 20);
  display.println("2018");
  display.display();
  delay(2000);

  display.clearDisplay();
  display.setCursor(6, 4);
  //display.setTextColor(WHITE, BLACK); // 'inverted' text
  display.println("Sensor");
  display.setCursor(12, 20);
  display.println("Thing");
  display.display();
  delay(2000);

  display.clearDisplay();
  display.display();
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.println("Init Sensors");

  // Initalise BME280

  if (! bme.begin()) {
    display.println("BME280 sensor");
    display.println("I2C Error");
    display.display();
    while (1);
  }
  display.println("BME280 OK");
  display.display();
/*
  // Initalise SI1145
  if (! uv.begin()) {
    display.println("SI1145 sensor");
    display.println("I2C Error");
    display.display();
    si1145missing = true;
    // while (1);
  } else {
    display.println("SI1145 OK");
    display.display();
  }
*/
  // Initalise MPU9250
  byte MPUWhoAmI =0;
  MPUWhoAmI = mpu.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
  if (MPUWhoAmI != 0x71) {
    display.println("MPU9250 Sensor");
    display.println("I2C Error");
    display.display();
    while (1);
  }
  display.print("MPU9250 OK ");
  display.println(MPUWhoAmI, HEX);
  display.display();

  // Calibrate gyro and accelerometers, load biases in bias registers
  mpu.calibrateMPU9250(mpu.gyroBias, mpu.accelBias);
  // Initialize device for active mode read of acclerometer, gyroscope, and temperature
  mpu.initMPU9250();
  // Get magnetometer calibration from AK8963 ROM
  mpu.initAK8963(mpu.magCalibration);


  encoder = new ClickEncoder(8, 9, 6);
  encoder->setAccelerationEnabled(false);

  //Timer1.initialize(1000);
  Timer1.attachInterrupt(timerIsr);

  last = encoder->getValue();
}

void loop() {

  drawMenu();

  readRotaryEncoder();

  ClickEncoder::Button b = encoder->getButton();
  if (b != ClickEncoder::Open) {
    switch (b) {
      case ClickEncoder::Clicked:
        middle = true;
        break;
    }
  }

  if (up && page == 1 ) {

    up = false;
    if (menuitem == 2 && frame == 2)
    {
      frame--;
    }

    if (menuitem == 4 && frame == 4)
    {
      frame--;
    }
    if (menuitem == 3 && frame == 3)
    {
      frame--;
    }
    lastMenuItem = menuitem;
    menuitem--;
    if (menuitem == 0)
    {
      menuitem = 1;
    }
  } else if (up && page == 2 && menuitem == 1 ) {
    up = false;
    if (contrast > 0) contrast--;
    setContrast();
  }
  else if (up && page == 2 && menuitem == 2 ) {
    up = false;
    if (brightness > 0) brightness--;
    turnBacklightOn();
  }
  else if (up && page == 2 && menuitem == 3 ) {
    up = false;
    selectedLanguage--;
    if (selectedLanguage == -1)
    {
      selectedLanguage = 2;
    }
  }
  else if (up && page == 2 && menuitem == 4 ) {
    up = false;
    selectedDifficulty--;
    if (selectedDifficulty == -1)
    {
      selectedDifficulty = 1;
    }
  }

  if (down && page == 1) //We have turned the Rotary Encoder Clockwise
  {

    down = false;
    if (menuitem == 3 && lastMenuItem == 2)
    {
      frame ++;
    } else  if (menuitem == 4 && lastMenuItem == 3)
    {
      frame ++;
    }
    else  if (menuitem == 5 && lastMenuItem == 4 && frame != 4)
    {
      frame ++;
    }
    lastMenuItem = menuitem;
    menuitem++;
    if (menuitem == 7)
    {
      menuitem--;
    }

  } else if (down && page == 2 && menuitem == 1) {
    down = false;
    if (contrast < 31) contrast++;
    setContrast();
  }
  else if (down && page == 2 && menuitem == 2) {
    down = false;
    if (brightness < 31) brightness++;
    turnBacklightOn();
  }
  else if (down && page == 2 && menuitem == 3 ) {
    down = false;
    selectedLanguage++;
    if (selectedLanguage == 3)
    {
      selectedLanguage = 0;
    }
  }
  else if (down && page == 2 && menuitem == 4 ) {
    down = false;
    selectedDifficulty++;
    if (selectedDifficulty == 2)
    {
      selectedDifficulty = 0;
    }
  }

  if (middle) //Middle Button is Pressed
  {
    middle = false;

    if (page == 1 && menuitem == 5) // Backlight Control
    {
      if (backlight)
      {
        backlight = false;
        menuItem5 = "Light: OFF";
        turnBacklightOff();
      }
      else
      {
        backlight = true;
        menuItem5 = "Light: ON";
        turnBacklightOn();
      }
    }

    if (page == 1 && menuitem == 6) // Reset
    {
      resetDefaults();
    }


    else if (page == 1 && menuitem <= 4) {
      page = 2;
    }
    else if (page == 2)
    {
      page = 1;
    }
  }
}

void drawMenu()
{

  if (page == 1)
  {
    display.setTextSize(1);
    display.clearDisplay();
    display.setTextColor(BLACK, WHITE);
    display.setCursor(15, 0);
    display.print("MAIN MENU");
    display.drawFastHLine(0, 10, 83, BLACK);

    if (menuitem == 1 && frame == 1)
    {
      displayMenuItem(menuItem1, 15, true);
      displayMenuItem(menuItem2, 25, false);
      displayMenuItem(menuItem3, 35, false);
    }
    else if (menuitem == 2 && frame == 1)
    {
      displayMenuItem(menuItem1, 15, false);
      displayMenuItem(menuItem2, 25, true);
      displayMenuItem(menuItem3, 35, false);
    }
    else if (menuitem == 3 && frame == 1)
    {
      displayMenuItem(menuItem1, 15, false);
      displayMenuItem(menuItem2, 25, false);
      displayMenuItem(menuItem3, 35, true);
    }
    else if (menuitem == 4 && frame == 2)
    {
      displayMenuItem(menuItem2, 15, false);
      displayMenuItem(menuItem3, 25, false);
      displayMenuItem(menuItem4, 35, true);
    }

    else if (menuitem == 3 && frame == 2)
    {
      displayMenuItem(menuItem2, 15, false);
      displayMenuItem(menuItem3, 25, true);
      displayMenuItem(menuItem4, 35, false);
    }
    else if (menuitem == 2 && frame == 2)
    {
      displayMenuItem(menuItem2, 15, true);
      displayMenuItem(menuItem3, 25, false);
      displayMenuItem(menuItem4, 35, false);
    }

    else if (menuitem == 5 && frame == 3)
    {
      displayMenuItem(menuItem3, 15, false);
      displayMenuItem(menuItem4, 25, false);
      displayMenuItem(menuItem5, 35, true);
    }

    else if (menuitem == 6 && frame == 4)
    {
      displayMenuItem(menuItem4, 15, false);
      displayMenuItem(menuItem5, 25, false);
      displayMenuItem(menuItem6, 35, true);
    }

    else if (menuitem == 5 && frame == 4)
    {
      displayMenuItem(menuItem4, 15, false);
      displayMenuItem(menuItem5, 25, true);
      displayMenuItem(menuItem6, 35, false);
    }
    else if (menuitem == 4 && frame == 4)
    {
      displayMenuItem(menuItem4, 15, true);
      displayMenuItem(menuItem5, 25, false);
      displayMenuItem(menuItem6, 35, false);
    }
    else if (menuitem == 3 && frame == 3)
    {
      displayMenuItem(menuItem3, 15, true);
      displayMenuItem(menuItem4, 25, false);
      displayMenuItem(menuItem5, 35, false);
    }
    else if (menuitem == 2 && frame == 2)
    {
      displayMenuItem(menuItem2, 15, true);
      displayMenuItem(menuItem3, 25, false);
      displayMenuItem(menuItem4, 35, false);
    }
    else if (menuitem == 4 && frame == 3)
    {
      displayMenuItem(menuItem3, 15, false);
      displayMenuItem(menuItem4, 25, true);
      displayMenuItem(menuItem5, 35, false);
    }
    display.display();
  }
  else if (page == 2 && menuitem == 1)
  {
    displayIntMenuPage(menuItem1, contrast);
  }

  else if (page == 2 && menuitem == 2)
  {
    displayIntMenuPage(menuItem2, brightness);
  }
  else if (page == 2 && menuitem == 3)
  {
    displayStringMenuPage(menuItem3, language[selectedLanguage]);
  }
  else if (page == 2 && menuitem == 4)
  {
    displayStringMenuPage(menuItem4, difficulty[selectedDifficulty]);
  }
  else if (page == 2 && menuitem == 4)
  {
    displayStringMenuPage(menuItem4, difficulty[selectedDifficulty]);
  }

}

void resetDefaults()
{
  contrast = 14;
  brightness = 16;
  selectedLanguage = 0;
  selectedDifficulty = 0;
  setContrast();
  backlight = true;
  menuItem5 = "Light: ON";
  turnBacklightOn();
}

void setContrast()
{
  display.setContrast(contrast * 4);
  //display.display();
  //delay(1000);
  //Serial.println(contrast);
}

void turnBacklightOn()
{
  //analogWrite(backlightPin, brightness);
  Timer1.pwm(backlightPin, brightness * 32);
}

void turnBacklightOff()
{
  //analogWrite(backlightPin, 0);
  Timer1.pwm(backlightPin, 0);
}

void timerIsr() {
  encoder->service();
}

void displayIntMenuPage(String menuItem, int value)
{
  display.setTextSize(1);
  display.clearDisplay();
  display.setTextColor(BLACK, WHITE);
  display.setCursor(15, 0);
  display.print(menuItem);
  display.drawFastHLine(0, 10, 83, BLACK);
  display.setCursor(5, 15);
  display.print("Value");
  display.setTextSize(2);
  display.setCursor(5, 25);
  display.print(value);
  display.setTextSize(2);
  display.display();
}

void displayStringMenuPage(String menuItem, String value)
{
  display.setTextSize(1);
  display.clearDisplay();
  display.setTextColor(BLACK, WHITE);
  display.setCursor(15, 0);
  display.print(menuItem);
  display.drawFastHLine(0, 10, 83, BLACK);
  display.setCursor(5, 15);
  display.print("Value");
  display.setTextSize(2);
  display.setCursor(5, 25);
  display.print(value);
  display.setTextSize(2);
  display.display();
}

void displayMenuItem(String item, int position, boolean selected)
{
  if (selected)
  {
    display.setTextColor(WHITE, BLACK);
  } else
  {
    display.setTextColor(BLACK, WHITE);
  }
  display.setCursor(0, position);
  display.print(">" + item);
}

void readRotaryEncoder()
{
  value += encoder->getValue();

  if (value / 2 > last) {
    last = value / 2;
    down = true;
    delay(150);
  } else   if (value / 2 < last) {
    last = value / 2;
    up = true;
    delay(150);
  }
}



